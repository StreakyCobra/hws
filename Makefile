# Use bash
SHELL := /bin/bash

# If the first argument is "run", disable other given command line arguments
# (interpreted as targets) and give them as arguments to the program.
ifeq (run,$(firstword $(MAKECMDGOALS)))
  # use the rest as arguments for "run"
  RUN_ARGS := $(wordlist 2,$(words $(MAKECMDGOALS)),$(MAKECMDGOALS))
  # ...and turn them into do-nothing targets
  $(eval $(RUN_ARGS):;@:)
endif# ocamlbuild variables

# ocamlbuild related 
OCBFLAGS := -classic-display
OCB := ocamlbuild $(OCBFLAGS)

# Files extensions
ML_EXT := ".ml"
MLI_EXT := ".mli"
CMA_EXT := ".cma"

# Directories
SRC_DIR := "src"
TESTS_DIR := "tests"

# Sources files
SRC_FILES := $(shell find $(SRC_DIR) -type f -name "*$(ML_EXT)")
TESTS_FILES := $(shell find $(TESTS_DIR) -type f -name "*$(ML_EXT)")
VERSION_FILE = $(SRC_DIR)/version.ml
DOC_FILE := hws.docdir/index.html

# Compiled files
SRC_CMA_FILES := $(SRC_FILES:.ml=.cma)
TESTS_CMA_FILES := $(TESTS_FILES:.ml=.cma)
VERSION_CMA_FILE = $(VERSION_FILE:.ml=.cma)

# Executables
SRC_EXE := $(SRC_DIR)/main.native
TESTS_EXE := $(TESTS_DIR)/tests.native

# Directories
SRC_DIRS := $(shell find $(SRC_DIR) -type d)
TESTS_DIRS := $(shell find $(TESTS_DIR) -type d)

# Ocaml modules
MODULES_ALL := ( $(shell find $(SRC_DIR) $(TESTS_DIR) -type f -name "*$(ML_EXT)" -exec basename -s "$(ML_EXT)" {} \;) )
MODULES_MLI := ( $(shell find $(SRC_DIR) $(TESTS_DIR) -type f -name "*$(MLI_EXT)" -exec basename -s "$(MLI_EXT)" {} \;) )

# .ocamlinit content
define OCAMLINIT_BODY
(* -*- mode: tuareg; -*- *)
(* This file content is generated by the Makefile. Edit it there. *)

(* Use topfind to find packages *)
#use "topfind" ;;

(* Require all dependencies *)
#require "unix" ;;
#require "oUnit" ;;
endef
export OCAMLINIT_BODY

# Default target

all: build

# Compilation targets

build: $(SRC_EXE)

tests: $(TESTS_EXE)

doc: hws.odocl
	$(OCB) $(DOC_FILE)

debug: $(SRC_CMA_FILES) $(TESTS_CMA_FILES) $(VERSION_CMA_FILE)

# Launchers

run: build
	@echo "================================================================"
	@echo
	@./`basename $(SRC_EXE)` $(RUN_ARGS) || true

runtests: tests
	@echo "================================================================"
	@echo
	@./`basename $(TESTS_EXE)` || true

viewdoc: doc
	xdg-open $(DOC_FILE)

top: debug .ocamlinit
	utop

# Clean all this

clean:
	$(OCB) -clean
	$(RM) $(VERSION_FILE)*

# Dynamically generated files liting Ocaml modules

hws.odocl:
	@echo -e "\e[91m$@: Generation\e[0m"
	@declare -a VALS=$(MODULES_MLI) \
		; echo $${VALS[@]^} \
		| sed -e 's/ /\n/g' \
		> $@
	@echo -e "\e[92m$@: Generated\e[0m"

.ocamlinit:
	@echo -e "\e[91m$@: Generation\e[0m"
	@echo "$$OCAMLINIT_BODY" > $@
	@echo >> $@
	@echo "(* Add directories *)" >> $@
	@declare -a VALS=($(SRC_DIRS)) \
		; echo $${VALS[@]} \
		| sed -e 's/ /\n/g' \
		| sed -e 's/^/#directory "_build\//g' \
		| sed -e 's/$$/" ;;/g' \
		>> $@
	@declare -a VALS=($(TESTS_DIRS)) \
		; echo $${VALS[@]} \
		| sed -e 's/ /\n/g' \
		| sed -e 's/^/#directory "_build\//g' \
		| sed -e 's/$$/" ;;/g' \
		>> $@
	@echo >> $@
	@echo "(* Load all local packages *)" >> $@
	@declare -a VALS=$(MODULES_ALL) \
		; echo $${VALS[@]} \
		| sed -e 's/ /\n/g' \
		| sed -e 's/^/#load "/g' \
		| sed -e 's/$$/.cma" ;;/g' \
		>> $@
	@echo -e "\e[92m$@: Generated\e[0m"

# Files extension targets

%.cma:
	$(OCB) $@
%.cmxa:
	$(OCB) $@
%.native:
	$(OCB) $@

.PHONY: all build debug tests doc run runtests viewdoc top clean hws.odocl .ocamlinit
