# Use bash
SHELL            := /bin/bash

# ocamlbuild related
OCBFLAGS         := -classic-display
OCB              := ocamlbuild $(OCBFLAGS)

# Files extensions
ML_EXT           := ".ml"
MLI_EXT          := ".mli"
CMA_EXT          := ".cma"

# Directories
MAN_DIR          := "man"
SRC_DIR          := "src"
TESTS_DIR        := "tests"
DOC_DIR          := "hws.docdir"

# Sources files
SRC_FILES        := $(shell find $(SRC_DIR) -type f -name "*$(ML_EXT)")
TESTS_FILES      := $(shell find $(TESTS_DIR) -type f -name "*$(ML_EXT)")
VERSION_FILE     := $(SRC_DIR)/version.ml
TOP_FILE         := .ocamlinit
ODOC_FILE        := hws.odocl
ODOC_INDEX       := $(DOC_DIR)/index.html

# Compiled files
SRC_CMA_FILES    := $(SRC_FILES:.ml=.cma)
TESTS_CMA_FILES  := $(TESTS_FILES:.ml=.cma)
VERSION_CMA_FILE := $(VERSION_FILE:.ml=.cma)

# Executables
SRC_EXE          := $(SRC_DIR)/main.native
TESTS_EXE        := $(TESTS_DIR)/tests.native

# Directories
SRC_DIRS         := $(shell find $(SRC_DIR) -type d)
TESTS_DIRS       := $(shell find $(TESTS_DIR) -type d)

# Ocaml modules
MODULES_ALL      := ( $(shell find $(SRC_DIR) $(TESTS_DIR) -type f -name "*$(ML_EXT)" -exec basename -s "$(ML_EXT)" {} \;) )
MODULES_MLI      := ( $(shell find $(SRC_DIR) $(TESTS_DIR) -type f -name "*$(MLI_EXT)" -exec basename -s "$(MLI_EXT)" {} \;) )

# .ocamlinit content
define OCAMLINIT_BODY
(* -*- mode: tuareg; -*- *)
(* This file content is generated by the Makefile. Edit it there. *)

(* Use topfind to find packages *)
#use "topfind" ;;
endef
export OCAMLINIT_BODY

# Default target

all: build tests doc man debug

# Compilation targets

build: $(SRC_EXE)

tests: $(TESTS_EXE)

doc: $(ODOC_FILE)
	$(OCB) $(ODOC_INDEX)

man:
	cd $(MAN_DIR); $(MAKE) all

debug: $(SRC_CMA_FILES) $(TESTS_CMA_FILES) $(VERSION_CMA_FILE)

# Launchers

runtests: tests
	@echo "================================================================"
	@echo
	@./`basename $(TESTS_EXE)` || true

viewdoc: doc
	xdg-open $(ODOC_INDEX)

viewman: man
	cd $(MAN_DIR); $(MAKE) $@

top: debug $(TOP_FILE)
	utop

# Clean all this

clean:
	$(OCB) -clean
	$(RM) $(TOP_FILE)
	$(RM) $(ODOC_FILE)
	$(RM) $(VERSION_FILE)*
	cd $(MAN_DIR); $(MAKE) $@

# Dynamically generated files

$(ODOC_FILE):
	@echo -e "\e[91m$@: Generation\e[0m"
	@declare -a VALS=$(MODULES_MLI) \
		; echo $${VALS[@]^} \
		| sed -e 's/ /\n/g' \
		> $@
	@echo -e "\e[92m$@: Generated\e[0m"

$(TOP_FILE):
	@echo -e "\e[91m$@: Generation\e[0m"
	@echo "$$OCAMLINIT_BODY" > $@
	@echo "(* Require all dependencies *)" >> $@
	@find $(SRC_DIR) $(TESTS_DIR) -name '_tags' \
		| xargs cat \
		| tr ':,' '\n\n' \
		| grep package \
		| grep -oe '(.*)' \
		| tr -d "()" \
		| uniq \
		| sed -e 's/^/#require "/' \
		| sed -e 's/$$/";;/' \
		>> $@
	@echo >> $@
	@echo "(* Add directories *)" >> $@
	@declare -a VALS=($(SRC_DIRS)) \
		; echo $${VALS[@]} \
		| sed -e 's/ /\n/g' \
		| sed -e 's/^/#directory "_build\//g' \
		| sed -e 's/$$/" ;;/g' \
		>> $@
	@declare -a VALS=($(TESTS_DIRS)) \
		; echo $${VALS[@]} \
		| sed -e 's/ /\n/g' \
		| sed -e 's/^/#directory "_build\//g' \
		| sed -e 's/$$/" ;;/g' \
		>> $@
	@echo >> $@
	@echo "(* Load all local packages *)" >> $@
	@declare -a VALS=$(MODULES_ALL) \
		; echo $${VALS[@]} \
		| sed -e 's/ /\n/g' \
		| sed -e 's/^/#load "/g' \
		| sed -e 's/$$/.cma" ;;/g' \
		>> $@
	@echo -e "\e[92m$@: Generated\e[0m"

# Files extension targets

%.cma:
	$(OCB) $@
%.cmxa:
	$(OCB) $@
%.native:
	$(OCB) $@

.PHONY: all build tests doc man debug runtests viewdoc viewman top clean $(ODOC_FILE) $(TOP_FILE)
